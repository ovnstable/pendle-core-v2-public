// SPDX-License-Identifier: GPL-3.0-or-later

pragma solidity 0.8.17;

library WadRayMath {
  uint256 internal constant RAY = 1e27;

  /**
   * @dev Multiplies two ray, rounding half down to the nearest ray
     * @param a Ray
     * @param b Ray
     * @return The result of a*b, in ray
     **/
  function rayMulDown(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0 || b == 0) {
      return 0;
    }
    require(a <= (type(uint256).max / b), "Errors.MATH_MULTIPLICATION_OVERFLOW");
    return (a * b) / RAY;
  }

  /**
   * @dev Divides two ray, rounding half down to the nearest ray
     * @param a Ray
     * @param b Ray
     * @return The result of a/b, in ray
     **/
  function rayDivDown(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0, "Errors.MATH_DIVISION_BY_ZERO");
    if (a == 0) {
      return 0;
    }
    require(a <= (type(uint256).max / RAY), "Errors.MATH_MULTIPLICATION_OVERFLOW");
    return (a * RAY) / b;
  }
}


interface IExchange {

    struct MintParams {
        address asset;   // USDC | BUSD depends at chain
        uint256 amount;  // amount asset
        string referral; // code from Referral Program -> if not have -> set empty
    }

    function buyFee() external view returns (uint256);

    function buyFeeDenominator() external view returns (uint256);

    function redeemFee() external view returns (uint256);

    function redeemFeeDenominator() external view returns (uint256);

    function balance() external view returns (uint256);

    // Minting USD+ in exchange for an asset

    function mint(MintParams calldata params) external returns (uint256);

    /**
     * @param _asset Asset to spend
     * @param _amount Amount of asset to spend
     * @return Amount of minted USD+ to caller
     */
    function buy(address _asset, uint256 _amount) external returns (uint256);

    /**
     * @param _asset Asset to redeem
     * @param _amount Amount of USD+ to burn
     * @return Amount of asset unstacked and transferred to caller
     */
    function redeem(address _asset, uint256 _amount) external returns (uint256);

    function payout() external;

}

interface IUsdPlusToken {

    function liquidityIndex() external view returns (uint256);
    function exchange() external view returns (address);

    function mint(address _sender, uint256 _amount) external;

    function burn(address _sender, uint256 _amount) external;

    /**
     * @dev See {IERC20-transfer}.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev See {IERC20-approve}.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Calculates the balance of the user: principal balance + interest generated by the principal
     * @param user The user whose balance is calculated
     * @return The balance of the user
     **/
    function balanceOf(address user) external view returns (uint256);

    /**
     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the
     * updated stored balance divided by the reserve's liquidity index at the moment of the update
     * @param user The user whose balance is calculated
     * @return The scaled balance of the user
     **/
    function scaledBalanceOf(address user) external view returns (uint256);

    /**
     * @dev calculates the total supply of the specific aToken
     * since the balance of every single user increases over time, the total supply
     * does that too.
     * @return the current total supply
     **/
    function totalSupply() external view returns (uint256);

    function totalMint() external view returns (uint256);

    function totalBurn() external view returns (uint256);

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);

    /**
     * @dev Returns the scaled total supply of the variable debt token
     * @return the scaled total supply
     **/
    function scaledTotalSupply() external view returns (uint256);

    function ownerLength() external view returns (uint256);

    function ownerAt(uint256 index) external view returns (address);

    function ownerBalanceAt(uint256 index) external view returns (uint256);

    /**
   * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() external view returns (string memory);

    /**
   * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() external pure returns (uint8);

}
